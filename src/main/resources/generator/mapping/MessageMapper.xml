<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.MessageMapper" >
  <resultMap id="BaseResultMap" type="model.Message" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="from_id" property="fromId" jdbcType="INTEGER" />
    <result column="to_id" property="toId" jdbcType="INTEGER" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="has_read" property="hasRead" jdbcType="INTEGER" />
    <result column="conversation_id" property="conversationId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, from_id, to_id, content, created_date, has_read, conversation_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="model.Message" >
    insert into message (id, from_id, to_id, 
      content, created_date, has_read, 
      conversation_id)
    values (#{id,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{createdDate,jdbcType=TIMESTAMP}, #{hasRead,jdbcType=INTEGER}, 
      #{conversationId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.Message" >
    insert into message
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fromId != null" >
        from_id,
      </if>
      <if test="toId != null" >
        to_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="createdDate != null" >
        created_date,
      </if>
      <if test="hasRead != null" >
        has_read,
      </if>
      <if test="conversationId != null" >
        conversation_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="fromId != null" >
        #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null" >
        #{toId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null" >
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hasRead != null" >
        #{hasRead,jdbcType=INTEGER},
      </if>
      <if test="conversationId != null" >
        #{conversationId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.Message" >
    update message
    <set >
      <if test="fromId != null" >
        from_id = #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null" >
        to_id = #{toId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null" >
        created_date = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hasRead != null" >
        has_read = #{hasRead,jdbcType=INTEGER},
      </if>
      <if test="conversationId != null" >
        conversation_id = #{conversationId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Message" >
    update message
    set from_id = #{fromId,jdbcType=INTEGER},
      to_id = #{toId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      created_date = #{createdDate,jdbcType=TIMESTAMP},
      has_read = #{hasRead,jdbcType=INTEGER},
      conversation_id = #{conversationId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>